Clelias-MacBook-Pro-2:MinCompSpin_BasisSearch128-main-O cleliademulatier$ ./BestBasis.out Big5PT.sorted 50 --var-k 4
--->> Create the "OUTPUT" Folder: (if needed) 

*******************************************************************************************
***********************************  READ THE DATA:  **************************************
*******************************************************************************************

--->> Read the datafile: "INPUT/Big5PT.sorted", 	 Build Nset...
	 Number of variables to read: n = 50

--->> File has been read successfully:
	 Data size, N = 1013558
	 Number of different states, Nset.size() = 989522


Elapsed time (in s): 0.857434


*******************************************************************************************
*******************************************************************************************
******************************  SEARCH UP TO ORDER K  *************************************
************************   IN SUCCCESSIVE REPRESENTATIONS  ********************************
********************  ! Stops when the found basis is Identity !  *************************
*******************************************************************************************
*******************************************************************************************
Search for the best basis among all operators up to order kmax = 4.

The data is then transformed in the representation given by the best basis.
The search for the best basis up to order kmax is re-iterated in this new representation.
The process is repeated until the basis doesn't change anymore
(i.e. the basis found in the current representation is identity).

*******************************************************************************************
***************************  SEARCH IN THE ORIGINAL BASIS:  *******************************
*******************************************************************************************

*****************  FIND THE SMALLEST BIAS OF THE CURRENT BASIS (k = 1):  ******************
*******************************************************************************************
--> Compute and rank all the observables of order 1 (fields).. 

Smallest bias = 0.000609733, 	 for the operator = 00000000000000000000000000000000001000000000000000		35	
 Largest bias = 0.401105, 	 for the operator = 00000000000000000000000000000000100000000000000000		33	

Taking the 'small bias' as a bound is LESS restrictive than the 3*sigma bound = 0.00148993

Elapsed time (in s): 0.937546

Estimated times (in s) for larger values of 'k':
	 k = 2: 	22.9699 s 	0.382831 min
	 k = 3: 	367.518 s 	6.1253 min
	 k = 4: 	4318.34 s 	71.9723 min
	 k = 5: 	39728.7 s 	662.145 min

-->> Print Operators in the file: 'OUTPUT/R0_k1_OpSet.dat'

****************************  ADD ALL OPERATORS for k = 2  ********************************
*******************************************************************************************
Current smallest 'Bias' = 0.000609733	 --> all operator with smaller 'Bias' will be rejected
Start iteration: k = 2
End iteration: k = 2	 total number of combinations = 1225	 total number of accepted operators = 1222

Elapsed time (in s): 24.4852

Estimated times (in s) for larger values of 'k':
	 k = 2: 	24.4852 s 	0.408087 min
	 k = 3: 	391.764 s 	6.5294 min
	 k = 4: 	4603.23 s 	76.7204 min
	 k = 5: 	42349.7 s 	705.828 min

-->> Print Operators in the file: 'OUTPUT/R0_k2_OpSet.dat'

******************************  SEARCH FOR BEST BASIS:  ***********************************
Total number of Operators to analyse = 1272

-->> Search for the Best Basis by step of 'm' = 1272 most biased operators:
	 Nit = 0: 		 Final rank = 50

-->> The Final Basis found has 50 independent operators:
	 --> this is equal to the number 'n' of variables: i.e., this is a Basis for the n-dimensional system
	 --> Smallest Bias among the basis components = 0.122652

-->> Print Basis Operators in the file: 'OUTPUT/R0_k2_BestBasis_OpSet.dat'

-->> Remove operators with small bias:
	 Smallest Bias accepted = 0.122652
	 Number of Operators left = 458

-->> Print Operators in the file: 'OUTPUT/R0_k2_CutSmallBias_OpSet.dat'

****************************  ADD ALL OPERATORS for k = 3  ********************************
*******************************************************************************************
Current smallest 'Bias' = 0.122652	 --> all operator with smaller 'Bias' will be rejected
Start iteration: k = 3
^C
Clelias-MacBook-Pro-2:MinCompSpin_BasisSearch128-main-O cleliademulatier$ ./BestBasis.out Big5PT.sorted 50 --var-k 4
--->> Create the "OUTPUT" Folder: (if needed) 

*******************************************************************************************
***********************************  READ THE DATA:  **************************************
*******************************************************************************************

--->> Read the datafile: "INPUT/Big5PT.sorted", 	 Build Nset...
	 Number of variables to read: n = 50

--->> File has been read successfully:
	 Data size, N = 1013558
	 Number of different states, Nset.size() = 989522


Elapsed time (in s): 0.835966


*******************************************************************************************
*******************************************************************************************
******************************  SEARCH UP TO ORDER K  *************************************
************************   IN SUCCCESSIVE REPRESENTATIONS  ********************************
********************  ! Stops when the found basis is Identity !  *************************
*******************************************************************************************
*******************************************************************************************
Search for the best basis among all operators up to order kmax = 4.

The data is then transformed in the representation given by the best basis.
The search for the best basis up to order kmax is re-iterated in this new representation.
The process is repeated until the basis doesn't change anymore
(i.e. the basis found in the current representation is identity).

*******************************************************************************************
***************************  SEARCH IN THE ORIGINAL BASIS:  *******************************
*******************************************************************************************

*****************  FIND THE SMALLEST BIAS OF THE CURRENT BASIS (k = 1):  ******************
*******************************************************************************************
--> Compute and rank all the observables of order 1 (fields).. 

Smallest bias = 0.000609733, 	 for the operator = 00000000000000000000000000000000001000000000000000		35	
 Largest bias = 0.401105, 	 for the operator = 00000000000000000000000000000000100000000000000000		33	

Taking the 'small bias' as a bound is LESS restrictive than the 3*sigma bound = 0.00148993

Elapsed time (in s): 0.88317

Estimated times (in s) for larger values of 'k':
	 k = 2: 	21.6377 s 	0.360628 min
	 k = 3: 	346.203 s 	5.77004 min
	 k = 4: 	4067.88 s 	67.798 min
	 k = 5: 	37424.5 s 	623.742 min

-->> Print Operators in the file: 'OUTPUT/R0_k1_OpSet.dat'

****************************  ADD ALL OPERATORS for k = 2  ********************************
*******************************************************************************************
Current smallest 'Bias' = 0.000609733	 --> all operator with smaller 'Bias' will be rejected
Start iteration: k = 2
End iteration: k = 2	 total number of combinations = 1225	 total number of accepted operators = 1222

Elapsed time (in s): 21.9449

Estimated times (in s) for larger values of 'k':
	 k = 2: 	21.9449 s 	0.365748 min
	 k = 3: 	351.118 s 	5.85196 min
	 k = 4: 	4125.63 s 	68.7606 min
	 k = 5: 	37955.8 s 	632.597 min

-->> Print Operators in the file: 'OUTPUT/R0_k2_OpSet.dat'

******************************  SEARCH FOR BEST BASIS:  ***********************************
Total number of Operators to analyse = 1272

-->> Search for the Best Basis by step of 'm' = 1272 most biased operators:
	 Nit = 0: 		 Final rank = 50

-->> The Final Basis found has 50 independent operators:
	 --> this is equal to the number 'n' of variables: i.e., this is a Basis for the n-dimensional system
	 --> Smallest Bias among the basis components = 0.122652

-->> Print Basis Operators in the file: 'OUTPUT/R0_k2_BestBasis_OpSet.dat'

-->> Remove operators with small bias:
	 Smallest Bias accepted = 0.122652
	 Number of Operators left = 458

-->> Print Operators in the file: 'OUTPUT/R0_k2_CutSmallBias_OpSet.dat'

****************************  ADD ALL OPERATORS for k = 3  ********************************
*******************************************************************************************
Current smallest 'Bias' = 0.122652	 --> all operator with smaller 'Bias' will be rejected
Start iteration: k = 3
End iteration: k = 3	 total number of combinations = 19600	 total number of accepted operators = 2015

Elapsed time (in s): 369.48

Estimated times (in s) for larger values of 'k':
	 k = 3: 	369.48 s 	6.158 min
	 k = 4: 	4341.39 s 	72.3565 min
	 k = 5: 	39940.8 s 	665.679 min
	 k = 6: 	299556 s 	4992.6 min

-->> Print Operators in the file: 'OUTPUT/R0_k3_OpSet.dat'

******************************  SEARCH FOR BEST BASIS:  ***********************************
Total number of Operators to analyse = 2473

-->> Search for the Best Basis by step of 'm' = 2473 most biased operators:
	 Nit = 0: 		 Final rank = 50

-->> The Final Basis found has 50 independent operators:
	 --> this is equal to the number 'n' of variables: i.e., this is a Basis for the n-dimensional system
	 --> Smallest Bias among the basis components = 0.122652

-->> Print Basis Operators in the file: 'OUTPUT/R0_k3_BestBasis_OpSet.dat'

-->> Remove operators with small bias:
	 Smallest Bias accepted = 0.122652
	 Number of Operators left = 2473

-->> Print Operators in the file: 'OUTPUT/R0_k3_CutSmallBias_OpSet.dat'

****************************  ADD ALL OPERATORS for k = 4  ********************************
*******************************************************************************************
Current smallest 'Bias' = 0.122652	 --> all operator with smaller 'Bias' will be rejected
Start iteration: k = 4
End iteration: k = 4	 total number of combinations = 230300	 total number of accepted operators = 4385

Elapsed time (in s): 5943.39

Estimated times (in s) for larger values of 'k':
	 k = 4: 	5943.39 s 	99.0565 min
	 k = 5: 	54679.2 s 	911.319 min
	 k = 6: 	410094 s 	6834.9 min
	 k = 7: 	2.57773e+06 s 	42962.2 min

-->> Print Operators in the file: 'OUTPUT/R0_k4_OpSet.dat'

******************************  SEARCH FOR BEST BASIS:  ***********************************
Total number of Operators to analyse = 6858

-->> Search for the Best Basis by step of 'm' = 6858 most biased operators:
	 Nit = 0: 		 Final rank = 50

-->> The Final Basis found has 50 independent operators:
	 --> this is equal to the number 'n' of variables: i.e., this is a Basis for the n-dimensional system
	 --> Smallest Bias among the basis components = 0.122652

-->> Print Basis Operators in the file: 'OUTPUT/R0_k4_BestBasis_OpSet.dat'

-->> Remove operators with small bias:
	 Smallest Bias accepted = 0.122652
	 Number of Operators left = 6858

-->> Print Operators in the file: 'OUTPUT/R0_k4_CutSmallBias_OpSet.dat'

*************************  SEARCH IN GIVEN REPRESENTATION: DONE  **************************
*******************************************************************************************
-->> Print Basis Operators: 	 Total number of operators = 50

## 1:i 	 2:bin 		 3:bias	 4:N[Op_i=1] 	 5:p[Op_i=1] 	 6:<Op> 	 7:LogL[Op_i] 	 8:Op_index 
## 
1	00000000000000000000000000000000100000000000000000	0.40110 	100236	0.098895 	0.802210 	-0.322649 	 Indices = 	33	
2	00000000000000000000000100000000000000000000000000	0.37597 	125710	0.124028 	0.751943 	-0.374875 	 Indices = 	24	
3	00000000000000000000000000000000000000010000000000	0.36999 	131773	0.130010 	0.739979 	-0.386406 	 Indices = 	40	
4	00000000000000000000010000000000000000000000000000	0.36798 	133811	0.132021 	0.735958 	-0.390211 	 Indices = 	22	
5	00000000000000000000010000100000000000000000000000	0.36504 	136790	0.134960 	0.730080 	-0.395708 	 Indices = 	27	22	
6	00000000000000000000000000000000000010000000000000	0.35667 	145269	0.143326 	0.713348 	-0.410955 	 Indices = 	37	
7	00000000000000000000000000010000000000000000000000	0.35521 	146758	0.144795 	0.710410 	-0.413573 	 Indices = 	28	
8	00000000000010000000000000000000000000000000000000	0.34970 	152342	0.150304 	0.699392 	-0.423236 	 Indices = 	13	
9	00000000000000000000000010100000000000000000000000	0.34946 	152582	0.150541 	0.698918 	-0.423646 	 Indices = 	27	25	
10	00000000000000000000000101000000000000000000000000	0.34634 	155743	0.153660 	0.692681 	-0.429005 	 Indices = 	26	24	
11	00000000000000000000000000000000000000000010010000	0.30596 	196673	0.194042 	0.611916 	-0.492031 	 Indices = 	46	43	
12	00000000000000000000001000000000000000000000000000	0.29196 	210857	0.208036 	0.583927 	-0.511343 	 Indices = 	23	
13	00000000000000000000000000000000000000000000000010	0.29042 	801137	0.790420 	-0.580841 	-0.513399 	 Indices = 	49	
14	00000000000000000000100000000000000000000000000000	0.27930 	223691	0.220699 	0.558602 	-0.527791 	 Indices = 	21	
15	00000000000000000000000000000000000000000000100001	0.27913 	223868	0.220873 	0.558253 	-0.528011 	 Indices = 	50	45	
16	00000000001010000000000000000000000000000000000000	0.27762 	225393	0.222378 	0.555244 	-0.529901 	 Indices = 	13	11	
17	00000000000000000000000000000000000000000000010000	0.27360 	784089	0.773601 	-0.547201 	-0.534889 	 Indices = 	46	
18	00000000000000000000000000000000000000000101000000	0.27218 	230904	0.227815 	0.544369 	-0.536623 	 Indices = 	44	42	
19	00010000010000000000000000000000000000000000000000	0.26544 	237738	0.234558 	0.530884 	-0.544725 	 Indices = 	10	4	
20	00000000000000000000000100001000000000000000000000	0.26369 	774048	0.763694 	-0.527388 	-0.546785 	 Indices = 	29	24	
21	00000000010000000000000000000000000000000000000000	0.26218 	241047	0.237823 	0.524355 	-0.548557 	 Indices = 	10	
22	10000010000000000000000000000000000000000000000000	0.25834 	244937	0.241661 	0.516679 	-0.552986 	 Indices = 	7	1	
23	00000000000000000000000000000000000000001000000100	0.25561 	247701	0.244388 	0.511225 	-0.556085 	 Indices = 	48	41	
24	00000000000000000000000000000010100000000000000000	0.25401 	249326	0.245991 	0.508018 	-0.557888 	 Indices = 	33	31	
25	00000000000000010010000000000000000000000000000000	0.24889 	254510	0.251106 	0.497789 	-0.563546 	 Indices = 	19	16	
26	10010000000000000000000000000000000000000000000000	0.24698 	256447	0.253017 	0.493967 	-0.565625 	 Indices = 	4	1	
27	00000000000000000000000000000000000000000000010001	0.24403 	259445	0.255974 	0.488051 	-0.568804 	 Indices = 	50	46	
28	00000001000000000000000000000000000000000000000000	0.24319 	260296	0.256814 	0.486372 	-0.569698 	 Indices = 	8	
29	00000000000000010100000000000000000000000000000000	0.24290 	260588	0.257102 	0.485796 	-0.570004 	 Indices = 	18	16	
30	00000000000000000000000000000000000000000000001000	0.24209 	752152	0.742091 	-0.484181 	-0.570859 	 Indices = 	47	
31	00000000000000000101000000000000000000000000000000	0.24150 	262007	0.258502 	0.482996 	-0.571484 	 Indices = 	20	18	
32	00000000000001000000000000000000000000000000000000	0.23483 	268764	0.265169 	0.469662 	-0.578394 	 Indices = 	14	
33	00000000000000000000000000000000010000000000000000	0.23431 	269289	0.265687 	0.468626 	-0.578921 	 Indices = 	34	
34	00000000000000000000000000000010000000100000000000	0.23198 	271658	0.268024 	0.463952 	-0.581284 	 Indices = 	39	31	
35	00101000000000000000000000000000000000000000000000	0.23135 	272289	0.268647 	0.462707 	-0.581908 	 Indices = 	5	3	
36	00001010000000000000000000000000000000000000000000	0.22772 	275967	0.272275 	0.455449 	-0.585509 	 Indices = 	7	5	
37	01010000000000000000000000000000000000000000000000	0.22513 	278598	0.274871 	0.450257 	-0.588044 	 Indices = 	4	2	
38	00000001100000000000000000000000000000000000000000	0.21609 	287755	0.283906 	0.432188 	-0.596604 	 Indices = 	9	8	
39	00000000000000000000000000000000000000000100001000	0.21372 	290159	0.286278 	0.427445 	-0.598785 	 Indices = 	47	42	
40	01000100000000000000000000000000000000000000000000	0.20352 	300498	0.296478 	0.407043 	-0.607851 	 Indices = 	6	2	
41	00000000001100000000000000000000000000000000000000	0.20234 	301700	0.297664 	0.404671 	-0.608872 	 Indices = 	12	11	
42	00000000001000001000000000000000000000000000000000	0.20002 	304051	0.299984 	0.400032 	-0.610851 	 Indices = 	17	11	
43	00000000000000000100000000000000000000000000000000	0.19206 	312110	0.307935 	0.384130 	-0.617438 	 Indices = 	18	
44	00000000000000000000000000000001000100000000000000	0.19096 	700326	0.690958 	-0.381916 	-0.618332 	 Indices = 	36	32	
45	00000000000000000000000000000001010000000000000000	0.18775 	316483	0.312250 	0.375501 	-0.620889 	 Indices = 	34	32	
46	00000000000000000000000000000000000000001000001000	0.16698 	337536	0.333021 	0.333958 	-0.636297 	 Indices = 	47	41	
47	00000000001000100000000000000000000000000000000000	0.16249 	342081	0.337505 	0.324990 	-0.639367 	 Indices = 	15	11	
48	00000000000000000000000000000001001000000000000000	0.15307 	351635	0.346931 	0.306137 	-0.645526 	 Indices = 	35	32	
49	00100000000000000000000000000100000000000000000000	0.14623 	358566	0.353770 	0.292461 	-0.649749 	 Indices = 	30	3	
50	00000000000000000000000000000000000101000000000000	0.12265 	382464	0.377348 	0.245304 	-0.662751 	 Indices = 	38	36	

##  LogL / N = -27.038674
## -LogL / N / log(2) = 39.008561 bits per datapoints 

Number of basis operators of a given order k:
	 k = 1 :	17 operators
	 k = 2 :	33 operators


*******************************************************************************************
***************************  SEARCH IN THE NEW BASIS:  ************************************
*******************  Stops when the found basis is Identity  ******************************
*******************************************************************************************
-->> Change the representation of the data in the current Best Basis:

--->> Build Kvect...
## Basis elements are ordered from the right (s_1) to the left (s_n).

	 Kvect.size() = 989522

*****************  FIND THE SMALLEST BIAS OF THE CURRENT BASIS (k = 1):  ******************
*******************************************************************************************
--> Compute and rank all the observables of order 1 (fields).. 

Smallest bias = 0.122652, 	 for the operator = 10000000000000000000000000000000000000000000000000		1	
 Largest bias = 0.401105, 	 for the operator = 00000000000000000000000000000000000000000000000001		50	

Taking the 'small bias' as a bound is MORE restrictive than the 3*sigma bound = 0.001490

Elapsed time (in s): 0.878949

Estimated times (in s) for larger values of 'k':
	 k = 2: 	21.534251 s 	0.358904 min
	 k = 3: 	344.548008 s 	5.742467 min
	 k = 4: 	4048.439094 s 	67.473985 min
	 k = 5: 	37245.639665 s 	620.760661 min

-->> Print Operators in the file: 'OUTPUT/R1_k1_OpSet.dat'

****************************  ADD ALL OPERATORS for k = 2  ********************************
*******************************************************************************************
Current smallest 'Bias' = 0.122652	 --> all operator with smaller 'Bias' will be rejected
Start iteration: k = 2
End iteration: k = 2	 total number of combinations = 1225	 total number of accepted operators = 690

Elapsed time (in s): 22.154031

Estimated times (in s) for larger values of 'k':
	 k = 2: 	22.154031 s 	0.369234 min
	 k = 3: 	354.464496 s 	5.907742 min
	 k = 4: 	4164.957828 s 	69.415964 min
	 k = 5: 	38317.612018 s 	638.626867 min

-->> Print Operators in the file: 'OUTPUT/R1_k2_OpSet.dat'

******************************  SEARCH FOR BEST BASIS:  ***********************************
Total number of Operators to analyse = 740

-->> Search for the Best Basis by step of 'm' = 740 most biased operators:
	 Nit = 0: 		 Final rank = 50

-->> The Final Basis found has 50 independent operators:
	 --> this is equal to the number 'n' of variables: i.e., this is a Basis for the n-dimensional system
	 --> Smallest Bias among the basis components = 0.122652

-->> Print Basis Operators in the file: 'OUTPUT/R1_k2_BestBasis_OpSet.dat'

-->> Remove operators with small bias:
	 Smallest Bias accepted = 0.122652
	 Number of Operators left = 740

-->> Print Operators in the file: 'OUTPUT/R1_k2_CutSmallBias_OpSet.dat'

****************************  ADD ALL OPERATORS for k = 3  ********************************
*******************************************************************************************
Current smallest 'Bias' = 0.122652	 --> all operator with smaller 'Bias' will be rejected
Start iteration: k = 3
End iteration: k = 3	 total number of combinations = 19600	 total number of accepted operators = 2383

Elapsed time (in s): 374.205716

Estimated times (in s) for larger values of 'k':
	 k = 3: 	374.205716 s 	6.236762 min
	 k = 4: 	4396.917163 s 	73.281953 min
	 k = 5: 	40451.637900 s 	674.193965 min
	 k = 6: 	303387.284247 s 	5056.454737 min

-->> Print Operators in the file: 'OUTPUT/R1_k3_OpSet.dat'

******************************  SEARCH FOR BEST BASIS:  ***********************************
Total number of Operators to analyse = 3123

-->> Search for the Best Basis by step of 'm' = 3123 most biased operators:
	 Nit = 0: 		 Final rank = 50

-->> The Final Basis found has 50 independent operators:
	 --> this is equal to the number 'n' of variables: i.e., this is a Basis for the n-dimensional system
	 --> Smallest Bias among the basis components = 0.122652

-->> Print Basis Operators in the file: 'OUTPUT/R1_k3_BestBasis_OpSet.dat'

-->> Remove operators with small bias:
	 Smallest Bias accepted = 0.122652
	 Number of Operators left = 3123

-->> Print Operators in the file: 'OUTPUT/R1_k3_CutSmallBias_OpSet.dat'

****************************  ADD ALL OPERATORS for k = 4  ********************************
*******************************************************************************************
Current smallest 'Bias' = 0.122652	 --> all operator with smaller 'Bias' will be rejected
Start iteration: k = 4
End iteration: k = 4	 total number of combinations = 230300	 total number of accepted operators = 3804

Elapsed time (in s): 4654.405873

Estimated times (in s) for larger values of 'k':
	 k = 4: 	4654.405873 s 	77.573431 min
	 k = 5: 	42820.534032 s 	713.675567 min
	 k = 6: 	321154.005237 s 	5352.566754 min
	 k = 7: 	2018682.318633 s 	33644.705311 min

-->> Print Operators in the file: 'OUTPUT/R1_k4_OpSet.dat'

******************************  SEARCH FOR BEST BASIS:  ***********************************
Total number of Operators to analyse = 6927

-->> Search for the Best Basis by step of 'm' = 6927 most biased operators:
	 Nit = 0: 		 Final rank = 50

-->> The Final Basis found has 50 independent operators:
	 --> this is equal to the number 'n' of variables: i.e., this is a Basis for the n-dimensional system
	 --> Smallest Bias among the basis components = 0.122652

-->> Print Basis Operators in the file: 'OUTPUT/R1_k4_BestBasis_OpSet.dat'

-->> Remove operators with small bias:
	 Smallest Bias accepted = 0.122652
	 Number of Operators left = 6927

-->> Print Operators in the file: 'OUTPUT/R1_k4_CutSmallBias_OpSet.dat'

*************************  SEARCH IN GIVEN REPRESENTATION: DONE  **************************
*******************************************************************************************
-->> Print Basis Operators: 	 Total number of operators = 50

## 1:i 	 2:bin 		 3:bias	 4:N[Op_i=1] 	 5:p[Op_i=1] 	 6:<Op> 	 7:LogL[Op_i] 	 8:Op_index 
## 
1	00000000000000000000000000000000000000000000000001	0.40110 	100236	0.098895 	0.802210 	-0.322649 	 Indices = 	50	
2	00000000000000000000000000000000000000000000000010	0.37597 	125710	0.124028 	0.751943 	-0.374875 	 Indices = 	49	
3	00000000000000000000000000000000000000000000000100	0.36999 	131773	0.130010 	0.739979 	-0.386406 	 Indices = 	48	
4	00000000000000000000000000000000000000000000001000	0.36798 	133811	0.132021 	0.735958 	-0.390211 	 Indices = 	47	
5	00000000000000000000000000000000000000000000010000	0.36504 	136790	0.134960 	0.730080 	-0.395708 	 Indices = 	46	
6	00000000000000000000000000000000000000000000100000	0.35667 	145269	0.143326 	0.713348 	-0.410955 	 Indices = 	45	
7	00000000000000000000000000000000000000000001000000	0.35521 	146758	0.144795 	0.710410 	-0.413573 	 Indices = 	44	
8	00000000000000000000000000000000000000000010000000	0.34970 	152342	0.150304 	0.699392 	-0.423236 	 Indices = 	43	
9	00000000000000000000000000000000000000000100000000	0.34946 	152582	0.150541 	0.698918 	-0.423646 	 Indices = 	42	
10	00000000000000000000000000000000000000001000000000	0.34634 	155743	0.153660 	0.692681 	-0.429005 	 Indices = 	41	
11	00000000000000000000000000000000000000010000000000	0.30596 	196673	0.194042 	0.611916 	-0.492031 	 Indices = 	40	
12	00000000000000000000000000000000000000100000000000	0.29196 	210857	0.208036 	0.583927 	-0.511343 	 Indices = 	39	
13	00000000000000000000000000000000000001000000000000	0.29042 	801137	0.790420 	-0.580841 	-0.513399 	 Indices = 	38	
14	00000000000000000000000000000000000010000000000000	0.27930 	223691	0.220699 	0.558602 	-0.527791 	 Indices = 	37	
15	00000000000000000000000000000000000100000000000000	0.27913 	223868	0.220873 	0.558253 	-0.528011 	 Indices = 	36	
16	00000000000000000000000000000000001000000000000000	0.27762 	225393	0.222378 	0.555244 	-0.529901 	 Indices = 	35	
17	00000000000000000000000000000000010000000000000000	0.27360 	784089	0.773601 	-0.547201 	-0.534889 	 Indices = 	34	
18	00000000000000000000000000000000100000000000000000	0.27218 	230904	0.227815 	0.544369 	-0.536623 	 Indices = 	33	
19	00000000000000000000000000000001000000000000000000	0.26544 	237738	0.234558 	0.530884 	-0.544725 	 Indices = 	32	
20	00000000000000000000000000000010000000000000000000	0.26369 	774048	0.763694 	-0.527388 	-0.546785 	 Indices = 	31	
21	00000000000000000000000000000100000000000000000000	0.26218 	241047	0.237823 	0.524355 	-0.548557 	 Indices = 	30	
22	00000000000000000000000000001000000000000000000000	0.25834 	244937	0.241661 	0.516679 	-0.552986 	 Indices = 	29	
23	00000000000000000000000000010000000000000000000000	0.25561 	247701	0.244388 	0.511225 	-0.556085 	 Indices = 	28	
24	00000000000000000000000000100000000000000000000000	0.25401 	249326	0.245991 	0.508018 	-0.557888 	 Indices = 	27	
25	00000000000000000000000001000000000000000000000000	0.24889 	254510	0.251106 	0.497789 	-0.563546 	 Indices = 	26	
26	00000000000000000000000010000000000000000000000000	0.24698 	256447	0.253017 	0.493967 	-0.565625 	 Indices = 	25	
27	00000000000000000000000100000000000000000000000000	0.24403 	259445	0.255974 	0.488051 	-0.568804 	 Indices = 	24	
28	00000000000000000000001000000000000000000000000000	0.24319 	260296	0.256814 	0.486372 	-0.569698 	 Indices = 	23	
29	00000000000000000000010000000000000000000000000000	0.24290 	260588	0.257102 	0.485796 	-0.570004 	 Indices = 	22	
30	00000000000000000000100000000000000000000000000000	0.24209 	752152	0.742091 	-0.484181 	-0.570859 	 Indices = 	21	
31	00000000000000000001000000000000000000000000000000	0.24150 	262007	0.258502 	0.482996 	-0.571484 	 Indices = 	20	
32	00000000000000000010000000000000000000000000000000	0.23483 	268764	0.265169 	0.469662 	-0.578394 	 Indices = 	19	
33	00000000000000000100000000000000000000000000000000	0.23431 	269289	0.265687 	0.468626 	-0.578921 	 Indices = 	18	
34	00000000000000001000000000000000000000000000000000	0.23198 	271658	0.268024 	0.463952 	-0.581284 	 Indices = 	17	
35	00000000000000010000000000000000000000000000000000	0.23135 	272289	0.268647 	0.462707 	-0.581908 	 Indices = 	16	
36	00000000000000100000000000000000000000000000000000	0.22772 	275967	0.272275 	0.455449 	-0.585509 	 Indices = 	15	
37	00000000000001000000000000000000000000000000000000	0.22513 	278598	0.274871 	0.450257 	-0.588044 	 Indices = 	14	
38	00000000000010000000000000000000000000000000000000	0.21609 	287755	0.283906 	0.432188 	-0.596604 	 Indices = 	13	
39	00000000000100000000000000000000000000000000000000	0.21372 	290159	0.286278 	0.427445 	-0.598785 	 Indices = 	12	
40	00000000001000000000000000000000000000000000000000	0.20352 	300498	0.296478 	0.407043 	-0.607851 	 Indices = 	11	
41	00000000010000000000000000000000000000000000000000	0.20234 	301700	0.297664 	0.404671 	-0.608872 	 Indices = 	10	
42	00000000100000000000000000000000000000000000000000	0.20002 	304051	0.299984 	0.400032 	-0.610851 	 Indices = 	9	
43	00000001000000000000000000000000000000000000000000	0.19206 	312110	0.307935 	0.384130 	-0.617438 	 Indices = 	8	
44	00000010000000000000000000000000000000000000000000	0.19096 	700326	0.690958 	-0.381916 	-0.618332 	 Indices = 	7	
45	00000100000000000000000000000000000000000000000000	0.18775 	316483	0.312250 	0.375501 	-0.620889 	 Indices = 	6	
46	00001000000000000000000000000000000000000000000000	0.16698 	337536	0.333021 	0.333958 	-0.636297 	 Indices = 	5	
47	00010000000000000000000000000000000000000000000000	0.16249 	342081	0.337505 	0.324990 	-0.639367 	 Indices = 	4	
48	00100000000000000000000000000000000000000000000000	0.15307 	351635	0.346931 	0.306137 	-0.645526 	 Indices = 	3	
49	01000000000000000000000000000000000000000000000000	0.14623 	358566	0.353770 	0.292461 	-0.649749 	 Indices = 	2	
50	10000000000000000000000000000000000000000000000000	0.12265 	382464	0.377348 	0.245304 	-0.662751 	 Indices = 	1	

##  LogL / N = -27.038674
## -LogL / N / log(2) = 39.008561 bits per datapoints 

Number of basis operators of a given order k:
	 k = 1 :	50 operators

Check Basis Identity, Iteration = 1 : 1

-->> All successive Bases are saved in the file: 'OUTPUT/All_Bases_inRi.dat'
Note that Bases are given in the successive representation, and not in the original representation


*******************************************************************************************
***********************  PRINT TERMINAL/FILE FINAL OPERATOR SET:  *************************
*******************************************************************************************
-->> Print Basis Operators: 	 Total number of operators = 50

## 1:i 	 2:bin 		 3:bias	 4:N[Op_i=1] 	 5:p[Op_i=1] 	 6:<Op> 	 7:LogL[Op_i] 	 8:Op_index 
## 
1	00000000000000000000000000000000100000000000000000	0.40110 	100236	0.098895 	0.802210 	-0.322649 	 Indices = 	33	
2	00000000000000000000000100000000000000000000000000	0.37597 	125710	0.124028 	0.751943 	-0.374875 	 Indices = 	24	
3	00000000000000000000000000000000000000010000000000	0.36999 	131773	0.130010 	0.739979 	-0.386406 	 Indices = 	40	
4	00000000000000000000010000000000000000000000000000	0.36798 	133811	0.132021 	0.735958 	-0.390211 	 Indices = 	22	
5	00000000000000000000010000100000000000000000000000	0.36504 	136790	0.134960 	0.730080 	-0.395708 	 Indices = 	27	22	
6	00000000000000000000000000000000000010000000000000	0.35667 	145269	0.143326 	0.713348 	-0.410955 	 Indices = 	37	
7	00000000000000000000000000010000000000000000000000	0.35521 	146758	0.144795 	0.710410 	-0.413573 	 Indices = 	28	
8	00000000000010000000000000000000000000000000000000	0.34970 	152342	0.150304 	0.699392 	-0.423236 	 Indices = 	13	
9	00000000000000000000000010100000000000000000000000	0.34946 	152582	0.150541 	0.698918 	-0.423646 	 Indices = 	27	25	
10	00000000000000000000000101000000000000000000000000	0.34634 	155743	0.153660 	0.692681 	-0.429005 	 Indices = 	26	24	
11	00000000000000000000000000000000000000000010010000	0.30596 	196673	0.194042 	0.611916 	-0.492031 	 Indices = 	46	43	
12	00000000000000000000001000000000000000000000000000	0.29196 	210857	0.208036 	0.583927 	-0.511343 	 Indices = 	23	
13	00000000000000000000000000000000000000000000000010	0.29042 	801137	0.790420 	-0.580841 	-0.513399 	 Indices = 	49	
14	00000000000000000000100000000000000000000000000000	0.27930 	223691	0.220699 	0.558602 	-0.527791 	 Indices = 	21	
15	00000000000000000000000000000000000000000000100001	0.27913 	223868	0.220873 	0.558253 	-0.528011 	 Indices = 	50	45	
16	00000000001010000000000000000000000000000000000000	0.27762 	225393	0.222378 	0.555244 	-0.529901 	 Indices = 	13	11	
17	00000000000000000000000000000000000000000000010000	0.27360 	784089	0.773601 	-0.547201 	-0.534889 	 Indices = 	46	
18	00000000000000000000000000000000000000000101000000	0.27218 	230904	0.227815 	0.544369 	-0.536623 	 Indices = 	44	42	
19	00010000010000000000000000000000000000000000000000	0.26544 	237738	0.234558 	0.530884 	-0.544725 	 Indices = 	10	4	
20	00000000000000000000000100001000000000000000000000	0.26369 	774048	0.763694 	-0.527388 	-0.546785 	 Indices = 	29	24	
21	00000000010000000000000000000000000000000000000000	0.26218 	241047	0.237823 	0.524355 	-0.548557 	 Indices = 	10	
22	10000010000000000000000000000000000000000000000000	0.25834 	244937	0.241661 	0.516679 	-0.552986 	 Indices = 	7	1	
23	00000000000000000000000000000000000000001000000100	0.25561 	247701	0.244388 	0.511225 	-0.556085 	 Indices = 	48	41	
24	00000000000000000000000000000010100000000000000000	0.25401 	249326	0.245991 	0.508018 	-0.557888 	 Indices = 	33	31	
25	00000000000000010010000000000000000000000000000000	0.24889 	254510	0.251106 	0.497789 	-0.563546 	 Indices = 	19	16	
26	10010000000000000000000000000000000000000000000000	0.24698 	256447	0.253017 	0.493967 	-0.565625 	 Indices = 	4	1	
27	00000000000000000000000000000000000000000000010001	0.24403 	259445	0.255974 	0.488051 	-0.568804 	 Indices = 	50	46	
28	00000001000000000000000000000000000000000000000000	0.24319 	260296	0.256814 	0.486372 	-0.569698 	 Indices = 	8	
29	00000000000000010100000000000000000000000000000000	0.24290 	260588	0.257102 	0.485796 	-0.570004 	 Indices = 	18	16	
30	00000000000000000000000000000000000000000000001000	0.24209 	752152	0.742091 	-0.484181 	-0.570859 	 Indices = 	47	
31	00000000000000000101000000000000000000000000000000	0.24150 	262007	0.258502 	0.482996 	-0.571484 	 Indices = 	20	18	
32	00000000000001000000000000000000000000000000000000	0.23483 	268764	0.265169 	0.469662 	-0.578394 	 Indices = 	14	
33	00000000000000000000000000000000010000000000000000	0.23431 	269289	0.265687 	0.468626 	-0.578921 	 Indices = 	34	
34	00000000000000000000000000000010000000100000000000	0.23198 	271658	0.268024 	0.463952 	-0.581284 	 Indices = 	39	31	
35	00101000000000000000000000000000000000000000000000	0.23135 	272289	0.268647 	0.462707 	-0.581908 	 Indices = 	5	3	
36	00001010000000000000000000000000000000000000000000	0.22772 	275967	0.272275 	0.455449 	-0.585509 	 Indices = 	7	5	
37	01010000000000000000000000000000000000000000000000	0.22513 	278598	0.274871 	0.450257 	-0.588044 	 Indices = 	4	2	
38	00000001100000000000000000000000000000000000000000	0.21609 	287755	0.283906 	0.432188 	-0.596604 	 Indices = 	9	8	
39	00000000000000000000000000000000000000000100001000	0.21372 	290159	0.286278 	0.427445 	-0.598785 	 Indices = 	47	42	
40	01000100000000000000000000000000000000000000000000	0.20352 	300498	0.296478 	0.407043 	-0.607851 	 Indices = 	6	2	
41	00000000001100000000000000000000000000000000000000	0.20234 	301700	0.297664 	0.404671 	-0.608872 	 Indices = 	12	11	
42	00000000001000001000000000000000000000000000000000	0.20002 	304051	0.299984 	0.400032 	-0.610851 	 Indices = 	17	11	
43	00000000000000000100000000000000000000000000000000	0.19206 	312110	0.307935 	0.384130 	-0.617438 	 Indices = 	18	
44	00000000000000000000000000000001000100000000000000	0.19096 	700326	0.690958 	-0.381916 	-0.618332 	 Indices = 	36	32	
45	00000000000000000000000000000001010000000000000000	0.18775 	316483	0.312250 	0.375501 	-0.620889 	 Indices = 	34	32	
46	00000000000000000000000000000000000000001000001000	0.16698 	337536	0.333021 	0.333958 	-0.636297 	 Indices = 	47	41	
47	00000000001000100000000000000000000000000000000000	0.16249 	342081	0.337505 	0.324990 	-0.639367 	 Indices = 	15	11	
48	00000000000000000000000000000001001000000000000000	0.15307 	351635	0.346931 	0.306137 	-0.645526 	 Indices = 	35	32	
49	00100000000000000000000000000100000000000000000000	0.14623 	358566	0.353770 	0.292461 	-0.649749 	 Indices = 	30	3	
50	00000000000000000000000000000000000101000000000000	0.12265 	382464	0.377348 	0.245304 	-0.662751 	 Indices = 	38	36	

##  LogL / N = -27.038674
## -LogL / N / log(2) = 39.008561 bits per datapoints 

-->> Print Basis Operators in the file: 'OUTPUT/Final_Basis_OpSet.dat'

Number of basis operators of a given order k:
	 k = 1 :	17 operators
	 k = 2 :	33 operators


*******************************************************************************************
*********************************  PRINT NEW DATAFILE:  ***********************************
**************************  ORIGINAL DATA WRITTEN IN NEW BASIS  ***************************
*******************************************************************************************

--->> Read the datafile: "Big5PT.sorted
	 Number of variables to read: n = 50

--->> Transform to new basis...
	 Write the new dataset in the file: "OUTPUT/Big5PT_inBestBasis.dat

--->> File has been converted to the new basis successfully:
	 Data size, N = 1013558

Operators are ordered from Right to Left: i.e. 
 	 - the first basis operator corresponds to the rightmost bit (lowest bit)
 	 - the n-th basis operator corresponds to the leftmost bit (highest bit) 

Elapsed time (in s): 9.758281	 for converting data


*******************************************************************************************
*********************************   TOTAL ELAPSED TIME:  **********************************
*******************************************************************************************

Elapsed time (in s): 11404.947786

